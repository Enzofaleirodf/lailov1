/**
 * üßπ UTILIT√ÅRIO PARA LIMPAR CACHE CORROMPIDO
 * 
 * Este arquivo cont√©m fun√ß√µes para limpar completamente o cache
 * que pode estar causando problemas com filtros din√¢micos
 */

export const clearCorruptedCache = (): void => {
  try {
    console.log('üßπ Limpando cache corrompido...');
    
    // 1. Limpar localStorage
    const localStorageKeys = Object.keys(localStorage);
    localStorageKeys.forEach(key => {
      if (
        key.startsWith('lailo-') ||
        key.startsWith('buscador-') ||
        key.includes('vehicle-brands') ||
        key.includes('react-query') ||
        key.includes('cache')
      ) {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è Removido do localStorage: ${key}`);
      }
    });
    
    // 2. Limpar sessionStorage
    const sessionStorageKeys = Object.keys(sessionStorage);
    sessionStorageKeys.forEach(key => {
      if (
        key.startsWith('lailo-') ||
        key.startsWith('buscador-') ||
        key.includes('vehicle-brands') ||
        key.includes('react-query') ||
        key.includes('cache')
      ) {
        sessionStorage.removeItem(key);
        console.log(`üóëÔ∏è Removido do sessionStorage: ${key}`);
      }
    });
    
    console.log('‚úÖ Cache corrompido limpo com sucesso!');
    
    // 3. For√ßar reload da p√°gina para garantir estado limpo
    if (typeof window !== 'undefined') {
      console.log('üîÑ Recarregando p√°gina para aplicar mudan√ßas...');
      window.location.reload();
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar cache:', error);
  }
};

export const clearVehicleBrandsCache = (): void => {
  try {
    console.log('üöó Limpando cache espec√≠fico de marcas de ve√≠culos...');
    
    // Limpar chaves espec√≠ficas de marcas
    const keysToRemove = [
      'lailo-react-query-cache',
      'lailo-advanced-cache-filters-vehicle-brands',
      'buscador-cache-vehicle-brands'
    ];
    
    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
      sessionStorage.removeItem(key);
      console.log(`üóëÔ∏è Removido: ${key}`);
    });
    
    // Limpar qualquer chave que contenha 'vehicle-brands'
    [...Object.keys(localStorage), ...Object.keys(sessionStorage)].forEach(key => {
      if (key.includes('vehicle-brands')) {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
        console.log(`üóëÔ∏è Removido cache de marcas: ${key}`);
      }
    });
    
    console.log('‚úÖ Cache de marcas limpo!');
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar cache de marcas:', error);
  }
};

// Fun√ß√£o para executar automaticamente na inicializa√ß√£o se necess√°rio
export const autoCleanCorruptedCache = (): void => {
  try {
    // Verificar se h√° indicadores de cache corrompido
    const hasCorruptedCache = localStorage.getItem('lailo-cache-corrupted') === 'true';
    
    if (hasCorruptedCache) {
      console.log('üö® Cache corrompido detectado, limpando automaticamente...');
      clearCorruptedCache();
      localStorage.removeItem('lailo-cache-corrupted');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na limpeza autom√°tica de cache:', error);
  }
};

// Marcar cache como corrompido para limpeza na pr√≥xima inicializa√ß√£o
export const markCacheAsCorrupted = (): void => {
  try {
    localStorage.setItem('lailo-cache-corrupted', 'true');
    console.log('üö® Cache marcado como corrompido');
  } catch (error) {
    console.error('‚ùå Erro ao marcar cache como corrompido:', error);
  }
};
